def label = "jenkins-slave"

properties([
   parameters([
      choice(name: 'ENV', choices: ['test', 'pre', 'prod'], description: '选择部署环境？')
   ])
])

podTemplate(label: label, containers: [
  containerTemplate(name: 'maven', image: 'maven:3.6.3-jdk-8', command: 'cat', ttyEnabled: true),
  containerTemplate(name: 'docker', image: 'docker:19.03.8', command: 'cat', ttyEnabled: true),
  containerTemplate(name: 'kubectl', image: 'boer0924/kubectl:1.18.3', command: 'cat', ttyEnabled: true)], serviceAccount: 'jenkins', volumes: [
  hostPathVolume(mountPath: '/root/.m2', hostPath: '/var/lib/cache/.m2'),
  hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock'),
  hostPathVolume(mountPath: '/var/lib/docker', hostPath: '/var/lib/docker')
]) {
  node(label) {
    if ("${params.ENV}" == 'test') {
      env.NAMESPACE = 'default'
      env.INGRESS = 'produce'
    }
    if ("${params.ENV}" == 'pre') {
      env.NAMESPACE = 'default'
      env.INGRESS = 'produce'
    }
    if ("${params.ENV}" == 'prod') {
      env.NAMESPACE = 'default'
      env.INGRESS = 'produce'
    }
    def myRepo = checkout scm
    def gitCommit = myRepo.GIT_COMMIT
    def gitBranch = myRepo.GIT_BRANCH
    def imageTag = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
    def changeCause = sh(script: "git log --oneline -1 HEAD", returnStdout: true).trim()
    def dockerRegistryUrl = "registry.meitianiot.lo"
    def imageEndpoint = "public/spring-produce"
    def image = "${dockerRegistryUrl}/${imageEndpoint}"

    stage('单元测试') {
      echo "-> ${params.ENV}"
      echo "1.测试阶段"
    }
    stage('代码编译打包') {
      try {
        container('maven') {
          echo "2. 代码编译打包阶段"
          sh "mvn clean package -Dmaven.test.skip=true"
        }
      } catch (exc) {
        println "构建失败 - ${currentBuild.fullDisplayName}"
        throw(exc)
      }
    }
    stage('构建 Docker 镜像') {
      withCredentials([[$class: 'UsernamePasswordMultiBinding',
        credentialsId: 'dockerhub',
        usernameVariable: 'DOCKER_HUB_USER',
        passwordVariable: 'DOCKER_HUB_PASSWORD']]) {
          container('docker') {
            echo "3. 构建 Docker 镜像阶段"
            sh """
              docker login ${dockerRegistryUrl} -u ${DOCKER_HUB_USER} -p ${DOCKER_HUB_PASSWORD}
              docker build -t ${image}:${imageTag} .
              docker push ${image}:${imageTag}
              """
          }
        }
    }
    stage('运行 Kubectl') {
      withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
        container('kubectl') {
          sh "mkdir -p ~/.kube && cp ${KUBECONFIG} ~/.kube/config"
          echo "查看当前目录"
          sh """
            sed -i "s|<CHANGE_CAUSE>|${changeCause}|g" manifests/k8s.yaml
            sed -i "s|<IMAGE>|${image}|g" manifests/k8s.yaml
            sed -i "s|<IMAGE_TAG>|${imageTag}|g" manifests/k8s.yaml
            sed -i "s|<INGRESS>|${INGRESS}|g" manifests/k8s.yaml
            kubectl apply -f manifests/k8s.yaml --namespace ${NAMESPACE}
          """
        }
      }
    }

    stage('快速回滚?') {
      withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
        container('kubectl') {
          sh "mkdir -p ~/.kube && cp ${KUBECONFIG} ~/.kube/config"
          def userInput = input(
            id: 'userInput',
            message: '是否需要快速回滚？',
            parameters: [
              [
                $class: 'ChoiceParameterDefinition',
                choices: "N\nY",
                name: '回滚?'
              ]
            ]
          )
          if (userInput == "Y") {
            sh "kubectl rollout undo deployment produce-deployment -n ${NAMESPACE}"
          }
        }
      }
    }

  }
}